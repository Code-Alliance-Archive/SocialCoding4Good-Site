<?php

/**
 * @file
 * Allows the admin to enter complex logic for the emails that they send in 
 * respose to a webform.  Uses SendGrid to send emails.
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function webform_email_customizer_help($path, $arg) {
  switch ($path) {
    case "admin/help#webform_email_customizer":
      return '<p>'.t("Allows the admin to enter logic for webform ".
                     "response emails").'</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function webform_email_customizer_menu() {
  $items = array();

  // config
  $items['admin/config/webform_email_customizer_form'] = array(
    'title' => 'Webform email customizer configuration',
    'description' => 'Configuration for webform email customizer module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_email_customizer_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form function, called by drupal_get_form() in 
 * webform_email_customizer_menu().
 * Allows an administrator to specify the custom logic underlying emails.
 */
function webform_email_customizer_form($form, &$form_state) {
  # TODO: figure out how to read the sample-config.yaml file from within drupal
  $sample_yaml_config = <<<EOD
<pre>
---
# This is one email.  The email will only be sent if the form's node is id 26
- webform_node_id: 26
  # The email will only be sent if all of these conditions match.  That is, the
  # form needs to have a text box with id form_test_1, and the user needs to put
  # the value 1 into it.  Similaryl, the form needs a multi-select called
  # form_test_3, and the user needs to have selected option1 and option2.
  conditions:
  - form_key: form_test_1
    form_value: 1
  - form_key: form_test_3
    form_value:
    - option1
    - option2
  # The remaining things are parameters for the SendGrid API call.  You can see
  # the full documentation at
  # http://docs.sendgrid.com/documentation/api/web-api/mail/#send
  # The below parameters are all of the required ones.  You can include any
  # others that are in SendGrid's web API, though.
  api_user: my_sendgrid_login@mydomain.com
  api_key: my_sendgrid_password
  from: from_email@mydomain.com
  to: to_email@example.com
  subject: Put Your Subject Here
  text: 
    Hi. You can do a multiline string
    like this
# If you want a second email for a second form, you can have the webform_node_id
# be the id of the second form.  If you want one form to possibly send different
# emails depending on different conditions, you can have the same
# webform_node_id.
- webform_node_id: 25
  conditions:
  - form_key: form_test_2
    form_value: 3
  - form_key: form_test_3
    form_value:
    - option2
    - option3
  # The api_user and api_key will probably be the same for each email.  The
  # other fields might be different.
  api_user: my_sendgrid_login@mydomain.com
  api_key: my_sendgrid_password
  from: from_email@mydomain.com
  # if you need to send an email to multiple people, you can do it like this
  to: 
  - to_email@example.com
  - another_email@example.com
  subject: Put Your Subject Here
  # instead of text, you can send your email as html
  # Note that if you want to use a multiline string with a colon, it needs to be
  # quoted.
  html: "&lt;p&gt;This html has multiple lines.&lt;/p&gt;
    &lt;p&gt;This is: the second line!&lt;/p&gt;"
  # it's okay to provide both a text and an html field.
  # in any field, if you put %field_name%, then that will be replaced with the
  # relevant field from the user's submission.  Since we know that form_test_2
  # is 3 in this example, this will include a 3 in the text.
  text: "Form Test 2 is: %form_test_2%"
...</pre>
EOD;

  $description = "Your text should be formatted like the following sample:".
    $sample_yaml_config;
  $form['webform_email_customizer_custom_emails'] = array(
    '#type' => 'textarea',
    '#title' => t('YAML for the emails and conditions.'),
    '#default_value' => variable_get('webform_email_customizer_custom_emails', 
                                     ''),
    '#size' => 30,
    # @todo DESCRIPTION OF THE YAML FORMAT + EXAMPLE
    '#description' => t($description),
  );

  return system_settings_form($form);
}

/**
 * Returns a mapping from field_id to submitted_form_value.
 * Note that the form values will be arrays if there are multiple values.
 */
function get_webform_submission_by_name($node, $submission) {
  $webform_components = $node->webform['components'];
  $submissions_by_name = array();
  foreach ($webform_components as $component_id => $component) {
    $form_key = $component['form_key'];
    $form_value = $submission->data[$component_id]['value'];
    if (count($form_value) == 1) {
      $form_value = $form_value[0];
    }
    $submissions_by_name[$form_key] = $form_value;
  }
  return $submissions_by_name;
}

/**
 * Returns true if the submissions from the provided webform meet the conditions
 * provided in the configuration.  The node id must match the config node and 
 * every form_key specified must have the value of the associated form_value.
 */
function submission_meets_criteria($node, $submissions_by_name, $config) {
  if ($config['webform_node_id'] != $node->nid) {
    return false;
  }
  foreach ($config['conditions'] as $condition) {
    if ($submissions_by_name[$condition['form_key']] != 
        $condition['form_value']) {
      return false;
    }
  }
  return true;
}

/**
 * Sends an email as specified in the $config, customized by fields in 
 * $submissions_by_name.
 */
function send_webform_response_email($submissions_by_name, $config) {
  # customize the email based on %form_fields%
  $custom_config = $config;
  foreach ($config as $config_field => $config_value) {
    if ($config_field != 'webform_node_id' && $config_field != 'conditions') {
      foreach ($submissions_by_name as $replace_field => $replace_value) {
        $custom_value = $custom_config[$config_field];
        $custom_config[$config_field] = 
            str_replace('%'.$replace_field.'%', $replace_value, $custom_value);
      }
    }
  }

  # send it
  $url =  'https://sendgrid.com/api/mail.send.json';
  $curl = curl_init($url);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($custom_config));
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  $response = curl_exec($curl);
  curl_close($curl);
}

/**
 * Implements hook_webform_submission_presave().
 */
function webform_email_customizer_webform_submission_presave(
    $node, $submission) {
  $submissions_by_name = get_webform_submission_by_name($node, $submission);
  # @todo use a pure-php YAML library so that we don't have to rely on having a 
  # yaml C library, which people who don't own their servers won't be able to 
  # install
  $email_configuration = yaml_parse(
      variable_get('webform_email_customizer_custom_emails', ''));
  foreach ($email_configuration as $config) {
    if (submission_meets_criteria($node, $submissions_by_name, $config)) {
      send_webform_response_email($submissions_by_name, $config);
    }
  }
}

