<?php

/**
 * @file
 * @todo describe the file once I know what it does
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function github_interface_help($path, $arg) {
  switch ($path) {
    case "admin/help#github_interface":
      // @todo add more help text
      return '<p>'.t("Displays information from a github issue tracker").'</p>';
      break;
  }
}

/**
 * Saves issues from the current user's github repo as nodes 
 */
function github_interface_save_github_nodes() {
  // help on getting data from profile2 at http://drupal.org/node/1310060
  global $user;
  $profile = profile2_load_by_user($user->uid, 'project');
  $repo_url = $profile->field_github_api_url['und'][0]['value'];

  $github_json = file_get_contents($repo_url);
  $github_obj = json_decode($github_json, $assoc=true);

  foreach ($github_obj as $issue) {
    // example from 
    // http://www.group42.ca/creating_and_updating_nodes_programmatically_in_drupal_7
    $node = new stdClass();
    $node->type = 'issue';
    node_object_prepare($node);
    $node->title = $issue['title'];
    $node->language = LANGUAGE_NONE;
    $node->body[$node->language][0] = array(
      'value' => $issue['body'],
      'summary' => text_summary($issue['body']),
      'format' => 'filtered_html'
    );
    $node->field_issue_id[$node->language][0]['value'] = $issue['id'];
    $node->field_issue_url[$node->language][0]['value'] = $issue['html_url'];
    $node->field_repo_url[$node->language][0]['value'] = $repo_url;

    // is there already a node similar to the one we're adding?
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node', '=') // a node
      ->entityCondition('bundle', 'issue', '=') // an issue
      ->propertyCondition('status', 1, '=') // published
      #->fieldCondition('field_repo_url', 'value', $repo_url, '=') // same repo
      ->fieldCondition('field_issue_id', 'value', $issue['id'], '='); // same id
    $result = $query->execute();

    // if the issue we're adding already exists, make sure that we don't 
    // duplicate it.
    if (count($result) != 0) {
      $existing_nodes = array_values($result['node']);
      $existing_node= $existing_nodes[0];
      $node->nid = $existing_node->nid;
      $node->vid = $existing_node->vid;
      $node->revision = TRUE;
    }
    node_save($node);
  }

  //Redirect the user back to their profile page with a message
  //@todo: print success statistics about the fetch
  drupal_set_message('Nodes Added / Updated!');
  drupal_goto('user/' . $user->uid);
}

/**
 * Implements hook_menu().
 *
 * Adds a tab in each user's profile page (if they are a project and, thus, can 
 * create new issues) to pull issues from github.  This will use the API url 
 * that they saved in their profile.
 */
function github_interface_menu() {
  $items['user/%user/github_interface'] = array(
    'title' => 'Pull issues from github',
    'description' => 'This will pull data from the issue tracker',
    'page callback' => 'github_interface_save_github_nodes',
    'access callback' => 'user_access',
    'access arguments' => array('create issue content'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

