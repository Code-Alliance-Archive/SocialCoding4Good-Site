<?php

/**
 * @file
 * @todo describe the file once I know what it does
 */

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function github_interface_help($path, $arg) {
  switch ($path) {
    case "admin/help#github_interface":
      // @todo add more help text
      return '<p>'.t("Displays information from a github issue tracker").'</p>';
      break;
  }
}

/**
 * Saves issues from the Social Coding 4 Good github repo as nodes 
 * @todo make general with API url and with label
 * @todo add support for label filtering
 * @todo add support for overwriting nodes
 */
function github_interface_save_github_nodes($repo_url) {
  $github_json = file_get_contents($repo_url);
  $github_obj = json_decode($github_json, $assoc=true);

  foreach ($github_obj as $issue) {
    // example from 
    // http://www.group42.ca/creating_and_updating_nodes_programmatically_in_drupal_7
    $node = new stdClass();
    $node->type = 'issue';
    node_object_prepare($node);
    $node->title = $issue['title'];
    $node->language = LANGUAGE_NONE;
    $node->body[$node->language][0] = array(
      'value' => $issue['body'],
      'summary' => text_summary($issue['body']),
      'format' => 'filtered_html'
    );
    $node->field_issue_id[$node->language][0]['value'] = $issue['id'];
    $node->field_issue_url[$node->language][0]['value'] = $issue['html_url'];
    $node->field_repo_url[$node->language][0]['value'] = $repo_url;
    node_save($node);
  }
}

/**
 * Implements hook_menu().
 */
function github_interface_menu() {
  $items = array();

  // config
  $items['admin/config/content/github_interface_form'] = array(
    'title' => 'Github interface configuration',
    'description' => 'Configuration for Github interface module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('github_interface_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  // callback
  // @todo causes apache server error after running the function
  $items['admin/config/content/github_interface_update'] = array(
    'title' => 'Github interface update',
    'description' => 'After putting info into the form, this will pull data ' .
                     'from the issue tracker',
    'page callback' => 'github_interface_save_github_nodes',
    'page arguments' => array(variable_get('github_repo_url')),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form function, called by drupal_get_form() in github_interface_menu().
 * Allows an administrator to specify the URL of a github repo to pull issues 
 * from.
 * @todo store this on a per-user basis rather than on a system wide basis.  
 * Will also require updating github_interface_save_github_nodes().
 */
function github_interface_form($form, &$form_state) {
  $form['github_repo_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of the repo to pull issues from'),
    '#default_value' => variable_get('github_repo_url', ''),
    '#size' => 30,
    '#description' => t('The API URL should look like:  https://api.github' .
        '.com/repos/YOUR_GITHUB_USERNAME/YOUR_GITHUB_PROJECT/issues'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 *  Allows the user to add an API url to their main account
 *  Implements hook_form_FROM_ID_alter().
 *  See http://www.braahm.be/node/7
 */
function github_interface_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];

  $form['project-info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project info'),
    '#description' => 'Provide information about your project',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#weight' => 10,
  );

  $form['project-info']['github-api-url'] = array(
    '#type' => 'textarea',
    '#title' => t('Github API URL'),
    '#description' => t('Provide a GitHub URL from which to load issues'),
    '#default_value' => isset($account->data['github-api-url']) ? 
                        $account->data['github-api-url'] : '',
  );
}

/**
 * Implements hook_user_presave().
 *
 * We want to store the API URL settings in the data field and make it part of 
 * the user object.
 * See http://www.braahm.be/node/7
 */
function github_interface_user_presave(&$edit, $account, $category) {
  $edit['data']['github-api-url'] = isset($edit['github-api-url']) ? 
                                    $edit['github-api-url'] : '';
}

